#!/usr/bin/env python3
# coding=utf-8

'''randomize-basename'''

# Standard library imports.
from __future__ import division
from pprint import pprint
from argparse import ArgumentParser
import sys
import os
import atexit
import gc
import shutil

# Related third party imports.
from pysyspol.util import random_alphanumeric_str

# Local application/library specific imports.
# import app_specific_mod

# Relevant ``__all__`` specification here.
# __all__ = ...

# GLOBAL CONSTANT names.  *if main* section at bottom sets global names too.

def on_exit():
    '''Actions to do on exit.'''
    #print('on_exit', LOGF)

    # Invoke the garbage collector.
    gc.collect()

def randomize_basename(fname, ntries=16, basename_len=40, verbosity=0,
        fverbose=sys.stderr, preserve_ext=True):
    assert ntries > 0
    assert basename_len > 0

    itry = ntries
    dirname, basename_src = os.path.split(fname)
    fname_dst = fname

    while os.path.exists(fname_dst):
        if itry <= 0:
            msg = "Failed {} times to find an available basename".format(ntries)
            raise OSError(msg)

        basename_dst_woext = random_alphanumeric_str(basename_len)
        if preserve_ext:
            basename_src_woext, basename_src_ext = os.path.splitext(basename_src)
            basename_dst = basename_dst_woext + basename_src_ext
        else:
            basename_dst = basename_dst_woext

        fname_dst = os.path.join(dirname, basename_dst)
        itry -= 1

    shutil.move(fname, fname_dst)
    if verbosity:
        print('`{}` -> `{}`'.format(fname, fname_dst), file=fverbose)

def main():
    parser = ArgumentParser()
    parser.add_argument('filename_src', nargs='*',
            help='''Regular file or directory''')
    args = parser.parse_args()

    for fname in args.filename_src:
        randomize_basename(fname=fname, verbosity=1)

if __name__ == "__main__":
    # Program name from file name.
    PN = os.path.splitext(sys.argv[0])[0]

    # Log file.
    LOGF = ''.join([PN, '_log', '.txt'])

    atexit.register(on_exit)

    main()
